#######################################################################################################################
#### 프로야구 기록 크롤링 연습                                                                                       ####
#### 작성자 : 박경호                                                                                                ####
#######################################################################################################################


## Statiz.co.kr 크롤링
## 1982 ~ 2015 전 구단 선수 기록 크롤링
## 200타석 이상 들어선 선수만 

library(rvest)
library(DT)
library(stringr)
library(xml2)
library(dplyr)
library(data.table)
library(stringr)

setwd("C:/R/final")


Sys.setlocale('LC_ALL', 'ko_KR.UTF-8')



### 1982 ~ 2015년 까지 각 구단 선수들의 타격 성적을 크롤링


### URL 마지막 부분인 te = 이후 구단 명이 들어가면 해당 구단 기록페이지로 넘어감. 

default.url = "http://www.statiz.co.kr/stat.php?opt=0&sopt=0&re=0&ys=1982&ye=2015&se=0&tm=&ty=0&qu=auto&po=0&as=&ae=&hi=&un=&pl=&da=1&o1=WAR_ALL_ADJ&o2=TPA&de=1&lr=0&tr=&cv=144&ml=1&sn=1000&si=&cn=&te="



### te = 뒤에 붙일 구단명들을 변수화 시켜 teamlist.df라는 데이터프레임으로 저장 

teamlist = c("삼성", "NC", "LG", "두산", "KIA", "넥센", "kt", "롯데", "SK", "OB", "현대", "해태", "히어로즈", "쌍방울", "청보", "삼미", "MBC", "태평양", "빙그레", "한화")


teamlist.df = data.frame(teamlist)


### 삼성을 기준으로 뒤에 나오는 구단들의 데이터를 세로로 합치기 위해 먼저 데이터프레임 for문 바깥에서 변수를 생성.

samsung.url <- paste0(default.url, teamlist.df[1,1])  
samsung.webpage <- xml2::read_html(samsung.url)
samsung.stats <- rvest::html_nodes(x = samsung.webpage, xpath = '//*[@id="mytable"]')
Sys.setlocale("LC_ALL", "English")
samsung.stats.table <- rvest::html_table(samsung.stats, fill=TRUE)[[1]]
Sys.setlocale("LC_ALL", "kor")
##all.stats.table <- samsung.stats.table  # 전 구단 데이터 관리를 위해 따로 all.stats.table 생성 

View(samsung.stats.table)

### 중간중간 setlocale을 한 이유는 계속 에러가 나고, 영문으로 바꾼 뒤 다시 한글로 설정하면 크롤링이 온전히 되는 현상.
### 잘 모르겠지만 일단 데이터 수집이 먼저라 향후 원인 분석 

for(i in 2:20){
  final_url = paste0(default.url, teamlist.df[i,1])
   webpage <- xml2::read_html(final_url, encoding = "UTF-8") 
    stats <- rvest::html_nodes(x = webpage, xpath = '//*[@id="mytable"]')
    Sys.setlocale("LC_ALL", "English")
    stats.table <- rvest::html_table(stats, fill=TRUE)[[1]]
    Sys.setlocale("LC_ALL", "kor")
    samsung.stats.table <- rbind(samsung.stats.table, stats.table)
  }

all.stats.table <- samsung.stats.table
View(samsung.stats.table)




## 변수명 모두 영문으로 변경 (복사본 stats_new 생성)
## 루타 와 같은 데이터는 일단 영문으로 변경 후 추후 삭제 
## 맨 마지막 ETC는 정제 작업 시 쓸데없는 열을 한번에 날리기 위함
stats_new <- all.stats.table

stats_new <- as.data.table(stats_new)

names(stats_new) <- c("rank", "player_name", "team", "arrange", "game", "PA", "AB", "R", "H", "2B", "3B", "HR", "luta", "RBI", "BB", "HBP", "SB", "CS", "IW", "SO", "DP", "S.Bunt", "SF", "AVG", "OBP", "SLG", "OPS", "wOBA", "wRC+", "WAR", "ETC")

View(stats_new)

#rank - 순위 // name - 선수이름  // team  - 팀 // game  - 경기 // PA  - 타석 // AB  - 타수 // R  - 득점 // H - 안타 // 2B -2루타  //  3B - 3루타  // HR  - 홈런 // RBI - 타점 // BB - 볼넷 // HBP - 사구 // SB - 도루성공 // CS - 도루실패 // IW - 고의사구  // SO -  삼진   // DP -병살타  // S.Bunt - 희생번트   // SF - 희생플라이  // AVG - 타율 // OBP - 출루율  // SLG - 장타율  // OPS - OPS  // wOBA - wOBA (기대득점확율) // wRC+ - WRC+  // WAR - WAR


## 크롤링하면서 같이 딸려온 엉뚱한 값들을 처리하기 위해 한글로 된 내용을 NA로 변환 후 삭제
## 데이터 중 rank에 숫자가 아닌 순이라는 값이 입력된 행들은 모두 쓸모가 없음
## 순이 들어간 열을 모두 NA처리 후 na.omit을 활용해 NA값을 모두 제거 

stats_new$rank <- ifelse(stats_new$rank == "순" | stats_new$rank == "", NA, stats_new$rank)

stats_new <- na.omit(stats_new)


## 기록 중 수치형인 것의 유형을 numeric 으로 변경 

str(stats_new)


stats_new$year <- as.numeric(stats_new$year)
stats_new$arrange <- as.numeric(stats_new$arrange)
stats_new$game <- as.numeric(stats_new$game)
stats_new$PA <- as.integer(stats_new$PA)
stats_new$AB <- as.numeric(stats_new$AB)
stats_new$R <- as.numeric(stats_new$R)
stats_new$H <- as.numeric(stats_new$H)
stats_new$'2B' <- as.numeric(stats_new$'2B')
stats_new$'3B' <- as.numeric(stats_new$'3B')
stats_new$HR <- as.numeric(stats_new$HR)
stats_new$luta <- as.numeric(stats_new$luta)
stats_new$RBI <- as.numeric(stats_new$RBI)
stats_new$BB <- as.numeric(stats_new$BB)
stats_new$HBP <- as.numeric(stats_new$HBP)
stats_new$SB <- as.numeric(stats_new$SB)
stats_new$CS <- as.numeric(stats_new$CS)
stats_new$IW <- as.numeric(stats_new$IW)
stats_new$SO <- as.numeric(stats_new$SO)
stats_new$DP <- as.numeric(stats_new$DP)
stats_new$S.Bunt <- as.numeric(stats_new$S.Bunt)
stats_new$SF <- as.numeric(stats_new$SF)
stats_new$AVG <- as.numeric(stats_new$AVG)
stats_new$OBP <- as.numeric(stats_new$OBP)
stats_new$SLG <- as.numeric(stats_new$SLG)
stats_new$OPS <- as.numeric(stats_new$OPS)
stats_new$wOBA <- as.numeric(stats_new$wOBA)
stats_new$'wRC+' <- as.numeric(stats_new$'wRC+')
stats_new$WAR <- as.numeric(stats_new$WAR)



## 포지션, 팀, 연도를 구분하기 위해 변수를 생성하고 기존의 99삼1B와 같은 값 슬라이싱 작업 

stats_new$year <- str_sub(stats_new$team, 1, 2)      # 년도 슬라이싱 후 year 에 저장 
stats_new$year <- ifelse(stats_new$year <= 15 & stats_new$year >= 0, 2000 + stats_new$year, 1900 + stats_new$year)


stats_new$position <- str_sub(stats_new$team, 4, 5)  # 포지션 슬라이싱 후 position에 저장

stats_new$team <- str_sub(stats_new$team, 3, 3)      # 팀 슬라이싱 


stats_new <- stats_new[ , c(1, 2, 32, 3, 33, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)] ## 편의상 column 순서 변경(year, positon) 









## 타석수가 200 미만인 선수는 제외 
## WAR과 중복되는 변수인 arrange도 삭제 

stats_new <- stats_new %>%
             filter(PA >= 200)%>%
             select(-arrange)


View(stats_new)






